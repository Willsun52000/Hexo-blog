{"meta":{"title":"温青 | 博客","subtitle":null,"description":null,"author":"温青 | 博客 - 孙如意 版权所有 辽ICP备16018228号-1","url":"http://yoursite.com"},"pages":[{"title":"about","date":"2017-03-23T13:50:38.000Z","updated":"2017-03-23T13:50:38.000Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"微服务概念","slug":"微服务概念","date":"2017-03-26T07:17:00.000Z","updated":"2017-03-27T14:44:39.000Z","comments":true,"path":"2017/03/26/微服务概念/","link":"","permalink":"http://yoursite.com/2017/03/26/微服务概念/","excerpt":"Martin Fowler是国际著名的OO专家，敏捷开发方法的创始人之一，现为ThoughtWorks公司的首席科学家.福勒（Martin Fowler），在面向对象分析设计、UML、模式、软件开发方法学、XP、重构等方面，都是世界顶级的专家，现为Thought Works公司的首席科学家。Thought Works是一家从事企业应用开发和集成的公司。早在20世纪80年代，Fowler就是使用对象技术构建多层企业应用的倡导者，他著有几本经典书籍： 《企业应用架构模式》、《UML精粹》和《重构》等。—— 百度百科","text":"Martin Fowler是国际著名的OO专家，敏捷开发方法的创始人之一，现为ThoughtWorks公司的首席科学家.福勒（Martin Fowler），在面向对象分析设计、UML、模式、软件开发方法学、XP、重构等方面，都是世界顶级的专家，现为Thought Works公司的首席科学家。Thought Works是一家从事企业应用开发和集成的公司。早在20世纪80年代，Fowler就是使用对象技术构建多层企业应用的倡导者，他著有几本经典书籍： 《企业应用架构模式》、《UML精粹》和《重构》等。—— 百度百科 微服务的概念最初由Martin Fowler与James Lewis于2014年共同提出，微服务架构风格是一种使用一套小服务来开发单个应用的方式途径，每个服务运行在自己的进程中，并使用轻量级机制通信，通常是HTTP API，这些服务基于业务能力构建，并能够通过自动化部署机制来独立部署，这些服务使用不同的编程语言书写，以及不同数据存储技术，并保持最低限度的集中式管理。随着微服务理论和实践的完善，一个真正的微服务都要体现一下特点：粒度小，无状态，基于轻量级通信协议，可以独立开发、测试、部署、发布、升级，扩容。这是一张作者很喜欢的经典图例，很形象的说明了微服务与传统单体应把你用（monolithic application）的区别。单一应用通常是一个all in one的结构，所有对外接口，基础服务都封装到一个包内，如果横向扩展就需要全量复制包，通过网关或者负载均衡分发请求。在实际的应用中往往包内海风装有前端代码，所有包可以共享一个数据库层。微服务中每一个服务单元都是独立的，都可以单独部署到任何一台主机上，为了便于扩容和容错，服务单元的部署个数和所在主机都是灵活的分布。举个简单的例子，一次我预定了一处甜点工作室给太太做一个生日蛋糕，先是烤好蛋糕，再在上面抹上一层奶油，最后点缀上水果巧克力，写上几个字。当太太吃到时候，虽然非常高兴但是觉得还是有点甜。这种时候通常只有两种选择，要么回去重做一个，再花一次钱（预算超支），要么说服我太太等到明年再给做一个（项目严重延期）。假设用微服务的思想怎么办？花最少的钱，做一个试吃的小块糕点，也有蛋糕，奶油，水果和巧克力，写不写字无所谓。如果太太满意，照样做一个正式的生日蛋糕，不喜欢的话，根据反馈，改进一下试吃蛋糕的口味，每次改进的成本其实远低于重做一个大蛋糕。","categories":[{"name":"微服务","slug":"microservice","permalink":"http://yoursite.com/categories/microservice/"}],"tags":[{"name":"入门基础","slug":"入门基础","permalink":"http://yoursite.com/tags/入门基础/"}]},{"title":"分布式版本管理","slug":"分布式版本管理Git","date":"2017-03-25T13:41:54.000Z","updated":"2017-03-27T14:46:15.000Z","comments":true,"path":"2017/03/25/分布式版本管理Git/","link":"","permalink":"http://yoursite.com/2017/03/25/分布式版本管理Git/","excerpt":"Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。","text":"Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。 本节不是Git的教程，而是介绍一下项目中Git的分支策略以及流程管理，同时也涉及一种广泛应用的商用Git工具BitBucket，顺便也会涉及一些代码托管Github以及这两年开始流行的Gitlab的使用方法，当然Github与Gitlab已不单单是版本控制，也包括后文将会提到的知识管理和持续集成。Git使用教程上一张比较经典的分支策略的图，涵盖版本发布，新Sprint开发，bug fix。 分布式而非集中式对于这种分支模型，我们设置了一个版本库称为原始库（origin）。每个开发者都对原始库（origin）库拉取（pull）代码和推送（push）代码。但是除了集中式的存取代码关系，每个开发者也可以从子团队的其他队友那里获得代码版本变更。例如，对于2个或多个开发者一起完成的大版本变更，为了防止过早地向origin库提交工作内容，这种机制就变得非常有用。在上述途中，有如下子团队：Alice和Bob，Alice和David，Clair和David。从技术上将，这意味着，Alice创建了一个Git的远程节点，而对于Bob，该节点指向了Bob的版本库，反之亦然。 主分支中心库有2个分支（branch）： master分支 develop分支 每个Git用户都要熟悉原始的master分支。与master分支并行的另一个分支，我们称之为develop分支。我们把origin/master库认作为主分支，HEAD默认指向master。我们把origin/develop库认为是主分支，该分支HEAD默认指向develop。当develop分支的源码到达了一个稳定状态待发布，所有的代码变更需要以某种方式合并到master分支，然后标记一个版本号。如何操作将在稍后详细介绍。所以，每次变更都合并到了master，这就是新产品的定义，并为之打上标签（tag）。 ###辅助性分支我们的开发模型使用了各种辅助性分支，这些分支与关键分支（master和develop）一起，用来支持团队成员们并行开发，使得易于追踪功能，协助生产发布环境准备，以及快速修复实时在线问题。与关键分支不同，这些分支总是有一个有限的生命期，因为他们最终会被移除。我们用到的分支类型包括： 功能分支 发布分支 热修复分支 每一种分支有一个特定目的，并且受限于严格到规则，比如：可以用哪些分支作为源分支，哪些分支能作为合并目标。我们马上将进行演练。从技术角度来看，这些分支绝不是特殊分支。分支的类型基于我们使用的方法来进行分类。它们理所当然是普通的Git分支。 ###功能分支（feature）可能是develop分支的分支版本，最终必须合并到develop分支中。分支命名规则：除了master、develop、release-或者hotfix-之外，其他命名均可。feature分支通常为即将发布或者未来发布版开发新的功能。当新功能开始研发，包含该功能的发布版本在这时还是无法确定发布时间的。feature版本的实质是只要这个功能处于开发状态它就会存在，但是最终会合并到develop分支或取消。功能分支通常存在于开发者的软件库，而不是在源代码库中。 创建一个功能分支开始一项功能的开发工作时，基于develop创建分支。12$ git checkout -b myfeature developSwitched to a new branch &quot;myfeature&quot; 合并一个功能到develop分支完成的功能可以合并进develop分支，以明确加入到未来的发布：12345678$ git checkout developSwitched to branch &apos;develop&apos;$ git merge --no-ff myfeatureUpdating ea1b82a..05e9557(Summary of changes)$ git branch -d myfeatureDeleted branch myfeature (was 05e9557).$ git push origin develop –no-ff标志导致合并操作创建一个新commit对象，即使该合并操作可以fast-forward。这避免了丢失这个功能分支存在的历史信息，将该功能的所有提交组合在一起。 比较:后一种情况，不可能从Git历史中看到哪些提交一起实现了一个功能，你必须手工阅读全部的日志信息。如果对整个功能进行回退 (比如一组提交)，后一种方式会是一种真正头痛的问题，而使用–no-ff的情况则很容易。 Release 分支Release分支可能从develop分支分离而来，但是一定要合并到develop和master分支上，它的习惯命名方式为：release-*。Release分支是为新产品的发布做准备的。它允许我们在最后时刻做一些细小的修改。他们允许小bugs的修改和准备发布元数据（版本号，开发时间等等）。从develop分支创建新的Release分支的关键时刻是develop分支达到了发布的理想状态。至少所有这次要发布的features必须在这个点及时合并到develop分支。对于所有未来准备发布的features必须等到Release分支创建以后再合并。在Release分支创建的时候要为即将发行版本分配一个版本号。直到那时，develop分支反映的变化都是为了下一个发行版，但是在Release分支创建之前，下一个发行版到底叫0.3还是1.0是不明确的。这个决定是在Release分支创建时根据项目在版本号上的规则制定的。 创建一个release分支Release分支是从develop分支创建的。例如，当前产品的发行版本号为1.1.5，同时我们有一个大的版本即将发行。develop 分支已经为下次发行做好了准备，我们得决定下一个版本是1.2（而不是1.1.6或者2.0）。所以我们将Release分支分离出来，给一个能够反映新版本号的分支名。1234567$ git checkout -b release-1.2 developSwitched to a new branch &quot;release-1.2&quot;$ ./bump-version.sh 1.2Files modified successfully, version bumped to 1.2.$ git commit -a -m &quot;Bumped version number to 1.2&quot;[release-1.2 74d9424] Bumped version number to 1.21 files changed, 1 insertions(+), 1 deletions(-) 创建新分支以后，切换到该分支，添加版本号。这里，bump-version.sh 是一个虚构的shell脚本，它可以复制一些文件来反映新的版本（这当然可以手动改变–目的就是修改一些文件）。然后版本号被提交。这个新分支可能会存在一段时间，直到该发行版到达它的预定目标。在此期间，bug的修复可能被提交到该分支上（而不是提交到develop分支上）。在这里严格禁止增加大的新features。他们必须合并到develop分支上，然后等待下一次大的发行版。 完成一个release分支当一个release分支准备好成为一个真正的发行版的时候，有一些工作必须完成。首先，release分支要合并到master上（因为每一次提交到master上的都是一个新定义的发行版，记住）。然后，提交到master上必须打一个标签，以便以后更加方便的引用这个历史版本。最后，在release分支上的修改必须合并到develop分支上，以便未来发行版也包含这些bugs的修复。123456$ git checkout masterSwitched to branch &apos;master&apos;$ git merge --no-ff release-1.2Merge made by recursive.(Summary of changes)$ git tag -a 1.2 为了是修改保持在release分支上，我们需要合并这些到develop分支上去。12345$ git checkout developSwitched to branch &apos;develop&apos;$ git merge --no-ff release-1.2Merge made by recursive.(Summary of changes) 这个步骤可能会导致合并冲突（可能由于改变版本号更是如此）。如果是这样，修复它然后提交。现在我们真正的完成了，这个release分支将被删除，因为我们不再需要它了。12$ git branch -d release-1.2Deleted branch release-1.2 (was ff452fe). 热修复分支可以基于master分支，必须合并回develop和master分支。分支名约定：hotfix-*热修复分支与发布分支很相似，他们都为新的生成环境发布做准备，尽管这是未经计划的。他们来自生产环境的处于异常状态压力。当生成环境验证缺陷必须马上修复是，热修复分支可以基于master分支上对应与线上版本的tag创建。其本质是团队成员（在develop分支上）的工作可以继续，而另一个人准备生产环境的快速修复。 创建修补bug分支hotfix branch（修补bug分支）是从Master分支上面分出来的。例如，1.2版本是当前生产环境的版本并且有bug。但是开发分支（develop）变化还不稳定。我们需要分出来一个修补bug分支（hotfix branch）来解决这种情况。1234567$ git checkout -b hotfix-1.2.1 masterSwitched to a new branch &quot;hotfix-1.2.1&quot;$ ./bump-version.sh 1.2.1Files modified successfully, version bumped to 1.2.1.$ git commit -a -m &quot;Bumped version number to 1.2.1&quot;[hotfix-1.2.1 41e61bb] Bumped version number to 1.2.11 files changed, 1 insertions(+), 1 deletions(-) 分支关闭的时侯不要忘了更新版本号(bump the version)然后，修复bug，一次提交或者多次分开提交。123$ git commit -m &quot;Fixed severe production problem&quot;[hotfix-1.2.1 abbe5d6] Fixed severe production problem5 files changed, 32 insertions(+), 17 deletions(-) 完成一个hotfix分支完成一个bugfix之后，需要把bugfix合并到master和develop分支去，这样就可以保证修复的这个bug也包含到下一个发行版中。这一点和完成release分支很相似。首先，更新master并对release打上tag：123456$ git checkout masterSwitched to branch &apos;master&apos;$ git merge --no-ff hotfix-1.2.1Merge made by recursive.(Summary of changes)$ git tag -a 1.2.1 下一步，把bugfix添加到develop分支中：12345$ git checkout developSwitched to branch &apos;develop&apos;$ git merge --no-ff hotfix-1.2.1Merge made by recursive.(Summary of changes) 规则的一个例外是： 如果一个release分支已经存在，那么应该把hotfix合并到这个release分支，而不是合并到develop分支。当release分支完成后， 将bugfix分支合并回release分支也会使得bugfix被合并到develop分支。（如果在develop分支的工作急需这个bugfix，等不到release分支的完成，那你也可以把bugfix合并到develop分支）最后，删除临时分支：12$ git branch -d hotfix-1.2.1Deleted branch hotfix-1.2.1 (was abbe5d6).","categories":[{"name":"微服务","slug":"microservice","permalink":"http://yoursite.com/categories/microservice/"}],"tags":[{"name":"基础流程框架","slug":"基础流程框架","permalink":"http://yoursite.com/tags/基础流程框架/"}]},{"title":"解决的问题与现实挑战","slug":"解决的问题与现实挑战","date":"2017-03-25T13:25:41.000Z","updated":"2017-03-27T14:45:00.000Z","comments":true,"path":"2017/03/25/解决的问题与现实挑战/","link":"","permalink":"http://yoursite.com/2017/03/25/解决的问题与现实挑战/","excerpt":"严格意义上讲微服务并不是一种全新的架构模式，从发展轨迹上来看，它更像是基于SOA体系架构加上一些最佳实践，幻化出来的新变种。微服务摒弃了SOA中以ESB为中心的思想，服务粒度大小适中（粒度划分会在敏捷开发章节详细论述），采用轻量级的通信协议，吸收了敏捷开发方法论的核心思想和一系列成熟的平台工具和开发规范。","text":"严格意义上讲微服务并不是一种全新的架构模式，从发展轨迹上来看，它更像是基于SOA体系架构加上一些最佳实践，幻化出来的新变种。微服务摒弃了SOA中以ESB为中心的思想，服务粒度大小适中（粒度划分会在敏捷开发章节详细论述），采用轻量级的通信协议，吸收了敏捷开发方法论的核心思想和一系列成熟的平台工具和开发规范。下面的表格展示了微服务与SOA的区别| 微服务 | SOA || :——– | :——–|| 使用大量小组件 | 存在各别较复杂的组件 || 业务逻辑存在于单独的服务领域中 | 业务逻辑可以跨多个领域存在 || 使用简单的连接协议，例如HTTP与XML或JSON | 企业服务产总线（ESB）充当了服务之间的层的角色 || 通过SDK与客户端连接API | 使用中间件 |微服务的一些优势是显而易见的： 每个服务都很简单，只关注于一个业务功能。在功能不变的情况下，应用被分解为多个可管理的分支或服务。每个服务都有一个用RPC-或者消息驱动API定义清楚的边界。微服务架构模式给采用单体式编码方式很难实现的功能提供了模块化的解决方案，由此，单个服务很容易开发、理解和维护。 每个微服务可以由不同的团队独立开发。这种架构使得每个服务都可以有专门开发团队来开发。开发者可以自由选择开发技术，提供API服务。当然，许多公司试图避免混乱，只提供某些技术选择。然后，这种自由意味着开发者不需要被迫使用某项目开始时采用的过时技术，他们可以选择现在的技术。甚至于，因为服务都是相对简单，即使用现在技术重写以前代码也不是很困难的事情。 微服务是松散耦合的。微服务架构模式是每个微服务独立的部署。开发者不再需要协调其它服务部署对本服务的影响。这种改变可以加快部署速度。UI团队可以采用AB测试，快速的部署变化。微服务架构模式使得持续化部署成为可能。 微服务可以通过不同的编程语言与工具进行开发。微服务架构模式使得每个服务独立扩展。你可以根据每个服务的规模来部署满足需求的规模。甚至于，你可以使用更适合于服务资源需求的硬件。比如，你可以在EC2 Compute Optimized instances上部署CPU敏感的服务，而在EC2 memory-optimized instances上部署内存数据库。 这些优势使得微服务看起来是非常完美的解决方案，不过微服务难道就没有缺点么？ 运维成本过高。微服务强调服务粒度，将原有功能或服务拆分成耦合度低的服务组，这就需要对服务组中各个服务单独运维，增加了运维的难度。 CICD是必须的。敏捷开发的引入要求服务的迭代速度前所未有的加快了，以适应瞬息万变的市场，这就导致了再开发耗时之外，不得不频繁的合并提交，部署上线，这在过去单靠人肉的时代是无法完成的任务，因此CICD是保证迭代顺利完成的关键。 接口不匹配。由于微服务间是以松耦合的契约规定服务调用方式的，服务方如果没有及时通知调用方接口的变化，会造成服务的调用的失败，甚至影响上线。 代码重复。为了避免将“同步耦合引入到系统中”，有时需要向不同服务添加一些代码，这就会导致代码重复，而代码重复是非常不好的，因为每个代码实例都需要进行测试和维护。一种解决方案是在服务间使用共享库，不过在多语言环境下这就行不通了，而且引入了耦合就意味着服务需要并行发布来维护彼此间的隐式接口。 分布式系统，异步的复杂性。分布式在微服务中的引入，在降低架构复杂度，解耦服务调用关系的同时，也带来了网络延迟，调用不确定性，分布式事务控制等一系列新挑战。 测试一个基于微服务架构的应用也是很复杂的任务。不只需要为每个服务建立基本的单体测试，还需要为了验证服务调用关系建立端到端的测试用例，在集成测试阶段还需要人工测试的同时尽可能多的用自动化测试化脚本覆盖到所有业务用例，这样才能尽可能保证快速迭代中，每次回归测试的自动化，降低迭代过程的测试成本。","categories":[{"name":"微服务","slug":"microservice","permalink":"http://yoursite.com/categories/microservice/"}],"tags":[{"name":"入门基础","slug":"入门基础","permalink":"http://yoursite.com/tags/入门基础/"}]},{"title":"前言","slug":"前言","date":"2017-03-24T15:16:26.000Z","updated":"2017-03-27T14:44:43.000Z","comments":true,"path":"2017/03/24/前言/","link":"","permalink":"http://yoursite.com/2017/03/24/前言/","excerpt":"2015年开始，微服务开始在国内成为一个关注度极高的词汇，最初在国内外互联网公司得到传播和应用，渐渐的扩展到传统领域。在一大批持续关注的追随者中，不乏一头雾水，不知为何要跟风的开发者。本书写作的目的就是为打算或者刚刚进入这个领域的开发者提供一个深入浅出，循序渐进的学习路径。","text":"2015年开始，微服务开始在国内成为一个关注度极高的词汇，最初在国内外互联网公司得到传播和应用，渐渐的扩展到传统领域。在一大批持续关注的追随者中，不乏一头雾水，不知为何要跟风的开发者。本书写作的目的就是为打算或者刚刚进入这个领域的开发者提供一个深入浅出，循序渐进的学习路径。先做一下自我介绍，本人05年毕业，大学期间做过那种前后台混成一堆的web应用和单机APP，工作后先接触J2EE企业级开发，做过前段，后端服务，中间件，数据库开发。后来有机会进入大厂从事系统集成SOA，分布式架构设计和开发，也有幸投身于开源社区活动。虽身在传统行业，但也对互联网行业技术架构和运营模式有所了解。希望能通过本书现身说法，给读者以启发。 这本书适合什么的读者群，是有一定开发经验，想要快速转型微服务的开发者，也适合刚刚从事微服务领域开发和架构，并且想要通过分享和交流来完善自身微服务理论与实践的自身开发者和架构师。 拿到这本书时该以怎样的正确姿势进行科学阅读呢？针对初学者强烈建议从第一章开始，先对概念有一个系统完整的理解，再有针对性的阅读以后章节。由于本书的宗旨是入门指导与实践，所以针对各种应用场景，都会用开源社区里容易找到的工具和平台，务求环境依赖最小，适合自学。好吧，废话少说，我们进入正题。","categories":[{"name":"微服务","slug":"microservice","permalink":"http://yoursite.com/categories/microservice/"}],"tags":[{"name":"入门基础","slug":"入门基础","permalink":"http://yoursite.com/tags/入门基础/"}]}]}